<?php

/**
 * @file
 * Core of the TPPSC module.
 */

require_once 'includes/submit_email.inc';

/**
 * Implements hook_menu().
 */
function tppsc_menu() {

  $items['tppsc'] = array(
    'title' => 'Internal TPPS pipeline',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tppsc_main'),
    'access callback' => 'tpps_access',
    'access arguments' => array('access tpps form'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['tppsc/%'] = array(
    'title' => 'Internal TPPS pipeline',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tppsc_main', 1),
    'access callback' => 'tpps_access',
    'access arguments' => array('access tpps form', 1),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/content/tppsc'] = array(
    'title' => 'TPPSC Settings',
    'description' => 'Configuration for TPPSC module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpps_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file path' => drupal_get_path('module', 'tpps'),
    'file' => 'admin/config.php',
  );

  return $items;
}

/**
 * Implements hook_mail().
 *
 * Sends mail to both users and administrators when submissions are completed,
 * rejected, or approved.
 *
 * @param mixed $key
 *   The type of message to send.
 * @param mixed $message
 *   The skeleton of the message to be sent.
 * @param mixed $params
 *   The parameters for the message.
 */
function tppsc_mail($key, &$message, $params) {
  // Set appropriate subject, body, headers.
  if (isset($params['subject'])) {
    $message['subject'] = $params['subject'];
  }
  if (isset($params['body'])) {
    $message['body'][] = $params['body'];
  }
  if (isset($params['headers']) && is_array($params['headers'])) {
    $message['headers'] += $params['headers'];
  }

  // Send different messages based on different keys.
  switch ($key) {
    case 'user_recieved':
      // When the user completes their submission, just provide them with
      // a brief list of the organisms they submitted.
      // @TODO [VS] Use theme('item_list') to build the HTML list.
      $message['body'][] = "Congratulations!<br><br>
            Your TPPSC submission has been received and is pending approval from a TreeGenes administrator! Here's a brief summary of the information you provided:<ul>
            <li>Primary Author: {$params['author']}</li>
            <li>Publication title: {$params['title']}</li>
            <li>Organisms: {$params['organisms']['number']}</li>";
      for ($i = 1; $i <= $params['organisms']['number']; $i++) {
        $message['body'][] =
          "   <li>Organism $i: " . check_plain($params['organisms'][$i]['name']) . "</li>";
      }
      $message['body'][] =
            "<li>Study Type: {$params['study_type']}</li>
            <li>Data Type: {$params['data_type']}</li></ul>
            You can view your submission <a href='{$params['base_url']}/completed-submission/{$params['accession']}' style='text-decoration: underline;'>here.</a><br>
            If you have any questions about your submission, please feel free to contact us <a href='{$params['base_url']}/contactform'>here</a>.<br><br>";
      break;

    case 'admin_recieved':
      // When the user completes their submission, notify the admin, and
      // provide them with a link to access the admin panel.
      $message['body'][] = "Attention:<br><br>
            User {$params['user_mail']} has completed a TPPSC Submission, titled {$params['title']}.<br>
            Click <a href='{$params['base_url']}/tpps-admin-panel/{$params['accession']}' style='text-decoration: underline;'>here</a> to manage or approve this submission.";
      break;

    case 'user_rejected':
      // When the user's submission is rejected, notify them, and provide
      // them with a link to go back and edit their submission. Also
      // provide them with the reason the admin included as to why their
      // submission was rejected.
      $message['body'][] =
            "To whom it may concern:<br><br>
            Unfortunately, your submission to TPPSC has been rejected. If you would like, you can log into the TreeGenes website and edit your submission <a href='{$params['base_url']}/user/{$params['uid']}/tpps'>here</a><br><br>
            The administrator who rejected your submission provided the following reason:<br>
            <blockquote>
            {$params['reject-reason']}
            </blockquote>";
      break;

    case 'user_approved':
      // When the user's submission is approved, notify them and provide
      // them with the link to view the completed submission.
      $message['body'][] =
            "Congratulations! Your submission to TPPSC has been approved!<br><br>
            You may now refer to your submitted data with accession number {$params['accession']}.<br><br>
            You can still view your submission from your <a href=\"{$params['base_url']}/completed-submission/{$params['accession']}\">TPPS Completed Submissions</a> tab.<br>
            Your submission should be public on the <a href=\"{$params['base_url']}/tpps_details/main\">TPPSC/TGDR Landing Page</a> within the next 24 hours.";
      break;

    default:
      break;
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * Increases max length on all textfields to 512. Adds
 * gttn_tpps_managed_file_process() to the array of process functions of all
 * managed_file form elements. This function is adapted from TPPS, which can be
 * found at https://tpps.rtfd.io.
 *
 * @param array $type
 *   The array of element information for each element type.
 */
function tppsc_element_info_alter(&$type) {
  if (isset($type['textfield']['#maxlength'])) {
    // Increase maximum textfield length.
    $type['textfield']['#maxlength'] = 512;
  }
  // Add tppsc_managed_file_process to the end of the '#process' array.
  $type['managed_file']['#process'][] = 'tppsc_managed_file_process';
}

/**
 * Process function for all managed_file elements.
 *
 * This function is adapted from TPPS, which can be found at
 * https://tpps.rtfd.io.
 *
 * @param array $element
 *   The element being processed.
 * @param array $form_state
 *   The state of the form the element is a part of.
 * @param array $form
 *   The form the element is a part of.
 *
 * @return array The processed element.
 *
 * @todo Need to add $form_state['accession'] so that the file/project can be
 * properly linked.
 */
function tppsc_managed_file_process($element, &$form_state, $form) {
  if ($form_state['build_info']['form_id'] !== 'tppsc_main') {
    // Only make changes to $element if it is part of the tppsc_main form.
    return $element;
  }
  else {
    $form_state['build_info']['form_id'] = 'tpps_main';
    $element = tpps_managed_file_process($element, $form_state, $form);
    $form_state['build_info']['form_id'] = 'tppsc_main';
    return $element;
  }
}

/**
 * Implements hook_form_alter().
 *
 * @param mixed $form
 *   The form being altered.
 * @param mixed $form_state
 *   The state of the form being altered.
 * @param mixed $form_id
 *   The id of the form being altered.
 */
function tppsc_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#form_id'] == 'tppsc_main') {
    $stage = $form_state['stage'];

    if (!isset($form_state['saved_values'][$stage])) {
      // Initialize saved_values array for the current stage.
      $form_state['saved_values'][$stage] = array();
    }
    if (!isset($form_state['values'])) {
      // Initialize values array for the current form.
      $form_state['values'] = array();
    }

    // Initialize default values for each of the leaves in the form tree.
    tpps_leaves($form, $form_state['values'], $form_state['saved_values'][$stage]);
  }
}

/**
 * Implements hook_page_build().
 *
 * This function adds the tppsc Status side bar to the page before it is rendered.
 *
 * @param array $page
 *   The page to be altered.
 *
 * @return type The altered page.
 */
function tppsc_page_build(&$page) {

  // If the form_id is not set, or it is not equal to gttn_tpps_main, or if the
  // step field is not set, do not add the status side bar.
  if (empty($page['content']['system_main']['#form_id']) or $page['content']['system_main']['#form_id'] != 'tppsc_main' or empty($page['content']['system_main']['step']['#default_value'])) {
    return $page;
  }

  // Load side bar from TPPS.
  $page['content']['system_main']['#form_id'] = 'tpps_main';
  $page = tpps_page_build($page);
  $page['content']['system_main']['#form_id'] = 'tppsc_main';

  return $page;
}

/**
 * Provides the form based on which step the user is on.
 *
 * @param array $form
 *   The form to be created.
 * @param array $form_state
 *   The state of the form to be created.
 *
 * @return array
 *   Returns the completed form.
 */
function tppsc_main(array $form, array &$form_state, $accession = NULL) {
  global $user;
  // Get the query parameters from the url.
  $params = drupal_get_query_parameters();

  // [VS].
  tpps_add_css_js($form);
  // Add class to apply CSS rules differntly for TPPS and TPPSc Forms
  // CSS form id is changing because of AJAX requests so we use form's class
  // in CSS rules instead of form's id with regex.
  $form['#attributes']['class'][] = 'tppsc-form';
  // [/VS].

  // User not logged in, trying to access front page.
  if (!isset($user->mail) and !isset($form_state['stage'])) {
    $form_state['stage'] = 'frontpage';

    // Create front page.
    module_load_include('php', 'tpps', 'forms/build/front');
    tpps_front_create_form($form, $form_state);
    return $form;
  }
  // User not logged in, trying to access non-front page.
  elseif (!isset($user->mail)) {
    $destination = drupal_get_destination();
    drupal_goto('user/login', array('query' => $destination));
  }
  // User logged in, trying to load form from existing accession.
  elseif (isset($accession) and !isset($form_state['stage'])) {
    $old_form_state = tpps_load_submission($accession);
    tpps_form_state_info($form_state, $old_form_state);
  }
  // User logged in, no accession provided.
  else {
    if (!isset($form_state['stage'])) {
      $form_state['stage'] = 'frontpage';

      // Create the front page.
      module_load_include('php', 'tpps', 'forms/build/front');
      tpps_front_create_form($form, $form_state);
      return $form;
    }
    else {
      if (
        !isset($form_state['saved_values']['frontpage']['accession'])
        or (
          isset($form_state['saved_values']['frontpage']['accession'])
          and $form_state['saved_values']['frontpage']['accession'] === 'new'
        )
      ) {
        // Initialize project.
        tpps_init_project($form_state);
        tpps_create_submission($form_state, $user->uid);
      }
      $old_form_state = tpps_load_submission($form_state['saved_values']['frontpage']['accession']);
      tpps_form_state_info($form_state, $old_form_state);
    }
  }

  // Hidden form accession element.
  // Note: Adding this elements to $form heare require all sub-functions to
  // use reference and not return $form array.
  // @TODO [VS] Use common function which called from subfunctions to add
  // common elements instead of pass $form by reference.
  $form['accession'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['accession'],
  );

  if (!isset($form_state['dbxref_id']) or !isset($form_state['accession'])) {
    tpps_init_project($form, $form_state);
  }

  $form_state['tpps_type'] = 'tppsc';
  tpps_update_submission($form_state);
  tppsc_status_bar($form, $form_state);

  switch ($form_state['stage']) {
    case TPPS_PAGE_1:
      module_load_include('php', 'tpps', 'forms/build/page_1');
      tpps_page_1_create_form($form, $form_state);
      break;

    case TPPS_PAGE_2:
      require_once 'forms/build/page_2.php';
      tppsc_page_2_create_form($form, $form_state);
      break;

    case TPPS_PAGE_3:
      module_load_include('php', 'tpps', 'forms/build/page_3');
      tpps_page_3_create_form($form, $form_state);
      break;

    case TPPS_PAGE_4:
      module_load_include('php', 'tpps', 'forms/build/page_4');
      tpps_page_4_create_form($form, $form_state);
      break;

    case 'summarypage':
      require_once 'forms/build/summary.php';
      tppsc_summary_create_form($form, $form_state);
      break;

    default:
      drupal_set_message(t('Invalid form stage.'), 'error');
      break;
  }

  return $form;
}

/**
 * Implements hook_FORM_ID_validate().
 *
 * Calls different validation functions based on the stage of the form. Also
 * saves file column data and add attributes to be used by the status bar where
 * appropriate.
 *
 * @param array $form
 *   The form being validated.
 * @param array $form_state
 *   The associated state of the form being validated.
 */
function tppsc_main_validate(&$form, &$form_state) {

  // If the user is going backwards or simply saving their data in the form,
  // make sure to save the column data for the managed_file elements. The rest
  // of the validation function does not need to be completed.
  if ($form_state['triggering_element']['#value'] == 'Back' or $form_state['triggering_element']['#value'] == 'Save') {
    tpps_save_file_columns($form, $form_state);
    return;
  }

  // Call the appropriate validation function based on the form stage.
  switch ($form_state['stage']) {
    case 'frontpage':
      if ($form_state['values']['use_old_tgdr'] and !$form_state['values']['old_tgdr']) {
        form_set_error('old_tgdr', 'Existing TGDR number: field is required.');
      }
      break;

    case TPPS_PAGE_1:
      module_load_include('php', 'tpps', 'forms/validate/page_1');
      tpps_page_1_validate_form($form, $form_state);
      break;

    case TPPS_PAGE_2:
      module_load_include('php', 'tpps', 'forms/validate/page_2');
      tpps_page_2_validate_form($form, $form_state);
      break;

    case TPPS_PAGE_3:
      module_load_include('php', 'tpps', 'forms/validate/page_3');
      tpps_page_3_validate_form($form, $form_state);
      break;

    case TPPS_PAGE_4:
      module_load_include('php', 'tpps', 'forms/validate/page_4');
      tpps_page_4_validate_form($form, $form_state);
      break;

    default:
      break;
  }
  // [VS].
  $module_path = drupal_get_path('module', 'tpps');
  $form['#attached']['js'][] = $module_path . TPPS_JS_PATH;
  // [/VS].
  // If there were no errors in validating the input, then let the form status
  // bar know that those fields are cleared to be shown.
  if (!form_get_errors()) {
    $form_state['values']['#cleared'] = TRUE;
    if ($form_state['submitted'] == '1') {
      tpps_submission_update_stats($form_state);
    }
  }
  // Otherwise, do not show the values for this page.
  else {
    $form_state['values']['#cleared'] = FALSE;
  }
}

/**
 * Implements hook_FORM_ID_submit().
 *
 * Calls different submission functions based on the stage of the form. Also
 * copies the form values into the form saved values so they can be seen by the
 * other pages and the final submit functions. Sets the incomplete form state
 * variable in the database so that it can be loaded later. If the form was
 * completed, notifies the user that their submission was received.
 *
 * @param global $user
 *   The user submitting the form.
 * @param array $form
 *   The form being submitted.
 * @param array $form_state
 *   The associated state of the form being submitted.
 */
function tppsc_main_submit($form, &$form_state) {
  global $user;

  if ($form_state['stage'] == 'frontpage' and $form_state['values']['use_old_tgdr']) {
    $form_state['dbxref_id'] = $form_state['values']['old_tgdr'];
    $form_state['accession'] = chado_select_record('dbxref', array('accession'), array(
      'dbxref_id' => $form_state['dbxref_id'],
    ))[0]->accession;
    $form_state['values']['accession'] = $form_state['accession'];
    $form_state['status'] = 'Incomplete';
    tpps_create_submission($form_state, $user->uid);
    tpps_main_submit($form, $form_state);
    tpps_update_submission($form_state);
    return;
  }

  if ($form_state['stage'] != 'summarypage') {
    tpps_main_submit($form, $form_state);
  }
  else {
    $form_state['saved_values'][$form_state['stage']] = $form_state['values'];
    $persist = TRUE;

    if ($form_state['triggering_element']['#value'] == 'Back') {
      $form_state['stage'] = TPPS_PAGE_4;
    }
    else {
      $form_state['status'] = 'Pending Approval';
      $form_state['completed'] = time();
      tpps_update_submission($form_state);
      tppsc_submit_email($form, $form_state);
      drupal_goto("completed-submission/{$form_state['accession']}");
      return;
    }

    if (isset($form_state['saved_values']['form_build_id'])) {
      $form_state['values']['form_build_id'] = $form_state['saved_values']['form_build_id'];
    }
    $form_state['saved_values']['form_build_id'] = $form_state['values']['form_build_id'];
    $form_state['rebuild'] = TRUE;

    if ($persist) {
      tpps_update_submission($form_state);
    }
  }
}
